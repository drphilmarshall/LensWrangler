// Generated by CoffeeScript 1.6.3
(function() {
  var PointTool, Tool, ToolLabel, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = (typeof window !== "undefined" && window !== null ? window.MarkingSurface : void 0) || require('marking-surface'), Tool = _ref.Tool, ToolLabel = _ref.ToolLabel;

  PointTool = (function(_super) {
    __extends(PointTool, _super);

    PointTool.prototype.radius = PointTool.mobile ? 25 : 15;

    PointTool.prototype.strokeWidth = 2;

    PointTool.prototype.pointerOffsetX = 0;

    PointTool.prototype.pointerOffsetY = 0;

    function PointTool() {
      PointTool.__super__.constructor.apply(this, arguments);
      this.mark.x = 0;
      this.mark.y = 0;
      this.ticks = this.addShape('path', {
        stroke: 'currentColor'
      });
      this.disc = this.addShape('circle', {
        fill: 'transparent',
        stroke: 'currentColor'
      });
      this.label = new ToolLabel({
        tool: this
      });
      this.addEvent('marking-surface:element:move', 'circle', this.onMove);
    }

    PointTool.prototype.onInitialStart = function(e) {
      PointTool.__super__.onInitialStart.apply(this, arguments);
      return this.onInitialMove(e);
    };

    PointTool.prototype.onInitialMove = function(e) {
      PointTool.__super__.onInitialMove.apply(this, arguments);
      return this.onMove(e);
    };

    PointTool.prototype.onMove = function(e) {
      var x, y, _ref1;
      _ref1 = this.coords(e), x = _ref1.x, y = _ref1.y;
      x -= this.pointerOffsetX;
      y -= this.pointerOffsetY;
      return this.mark.set({
        x: x,
        y: y
      });
    };

    PointTool.prototype.render = function() {
      var scale, scaledRadius, scaledStrokeWidth, _ref1, _ref2, _ref3;
      PointTool.__super__.render.apply(this, arguments);
      scale = (((_ref1 = this.markingSurface) != null ? _ref1.scaleX : void 0) + ((_ref2 = this.markingSurface) != null ? _ref2.scaleY : void 0)) / 2;
      scaledRadius = this.radius / scale;
      scaledStrokeWidth = this.strokeWidth / scale;
      this.attr('transform', "translate(" + this.mark.x + ", " + this.mark.y + ")");
      this.ticks.attr({
        d: "M " + (-scaledRadius) + " 0 L " + (-scaledRadius * (1 / 3)) + " 0 M " + scaledRadius + " 0 L " + (scaledRadius * (1 / 3)) + " 0\nM 0 " + (-scaledRadius) + " L 0 " + (-scaledRadius * (1 / 3)) + " M 0 " + scaledRadius + " L 0 " + (scaledRadius * (1 / 3)),
        strokeWidth: scaledStrokeWidth
      });
      this.disc.attr({
        r: scaledRadius,
        strokeWidth: scaledStrokeWidth
      });
      if ((_ref3 = this.controls) != null) {
        _ref3.moveTo(this.mark);
      }
      this.label.setContent("" + (this.mark.x.toString().split('.')[0]) + ", " + (this.mark.y.toString().split('.')[0]));
      return this.label.moveTo(this.mark);
    };

    return PointTool;

  })(Tool);

  if (typeof window !== "undefined" && window !== null) {
    window.MarkingSurface.PointTool = PointTool;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = PointTool;
  }

}).call(this);
